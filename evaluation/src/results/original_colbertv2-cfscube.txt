[Jul 13, 15:21:50] #> Loading collection...
0M 
[Jul 13, 15:21:59] #> Loading codec...
[Jul 13, 15:21:59] Loading decompress_residuals_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[Jul 13, 15:22:00] Loading packbits_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[Jul 13, 15:22:00] #> Loading IVF...
[Jul 13, 15:22:01] #> Loading doclens...
[Jul 13, 15:22:01] #> Loading codes and residuals...

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: Naturalizing a Programming Language via Interactive Learning, 		 True, 		 None
#> Output IDs: torch.Size([64]), tensor([ 101,    1, 3019, 6026, 1037, 4730, 2653, 3081, 9123, 4083,  102,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103], device='cuda:0')
#> Output Mask: torch.Size([64]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')

({'NDCG@5': 0.04379, 'NDCG@10': 0.04475, 'NDCG@100': 0.10307, 'NDCG@1000': 0.16157}, {'MAP@5': 0.01395, 'MAP@10': 0.01606, 'MAP@100': 0.02529, 'MAP@1000': 0.02847}, {'Recall@5': 0.02988, 'Recall@10': 0.04092, 'Recall@100': 0.20893, 'Recall@1000': 0.49831}, {'P@5': 0.044, 'P@10': 0.03, 'P@100': 0.0126, 'P@1000': 0.00296}) {'MRR@5': 0.09233, 'MRR@10': 0.09733, 'MRR@100': 0.10852, 'MRR@1000': 0.11033}

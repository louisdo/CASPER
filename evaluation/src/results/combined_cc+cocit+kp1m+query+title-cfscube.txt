[May 03, 02:25:42] #> Loading collection...
0M 
[May 03, 02:25:48] #> Loading codec...
[May 03, 02:25:48] Loading decompress_residuals_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[May 03, 02:25:49] Loading packbits_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[May 03, 02:25:49] #> Loading IVF...
[May 03, 02:25:50] #> Loading doclens...
[May 03, 02:25:50] #> Loading codes and residuals...

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: Naturalizing a Programming Language via Interactive Learning, 		 True, 		 None
#> Output IDs: torch.Size([64]), tensor([ 101,    1, 3019, 6026, 1037, 4730, 2653, 3081, 9123, 4083,  102,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103], device='cuda:0')
#> Output Mask: torch.Size([64]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')

({'NDCG@5': 0.0348, 'NDCG@10': 0.04347, 'NDCG@100': 0.12535, 'NDCG@1000': 0.17768}, {'MAP@5': 0.01132, 'MAP@10': 0.01425, 'MAP@100': 0.02966, 'MAP@1000': 0.03259}, {'Recall@5': 0.02204, 'Recall@10': 0.03955, 'Recall@100': 0.27364, 'Recall@1000': 0.55183}, {'P@5': 0.028, 'P@10': 0.028, 'P@100': 0.0158, 'P@1000': 0.00314}) {'MRR@5': 0.06833, 'MRR@10': 0.08352, 'MRR@100': 0.09992, 'MRR@1000': 0.10093}

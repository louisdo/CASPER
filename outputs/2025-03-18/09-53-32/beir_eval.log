[2025-03-18 09:53:33,332][beir.datasets.data_loader][INFO] - Loading Corpus...
[2025-03-18 09:53:34,504][beir.datasets.data_loader][INFO] - Loaded 25657 TEST Documents.
[2025-03-18 09:53:34,505][beir.datasets.data_loader][INFO] - Doc Example: {'text': 'An evolutionary recurrent network which automates the design of recurrent neural/fuzzy networks using a new evolutionary learning algorithm is proposed in this paper. This new evolutionary learning algorithm is based on a hybrid of genetic algorithm (GA) and particle swarm optimization (PSO), and is thus called HGAPSO. In HGAPSO, individuals in a new generation are created, not only by crossover and mutation operation as in GA, but also by PSO. The concept of elite strategy is adopted in HGAPSO, where the upper-half of the best-performing individuals in a population are regarded as elites. However, instead of being reproduced directly to the next generation, these elites are first enhanced. The group constituted by the elites is regarded as a swarm, and each elite corresponds to a particle within it. In this regard, the elites are enhanced by PSO, an operation which mimics the maturing phenomenon in nature. These enhanced elites constitute half of the population in the new generation, whereas the other half is generated by performing crossover and mutation operation on these enhanced elites. HGAPSO is applied to recurrent neural/fuzzy network design as follows. For recurrent neural network, a fully connected recurrent neural network is designed and applied to a temporal sequence production problem. For recurrent fuzzy network design, a Takagi-Sugeno-Kang-type recurrent fuzzy network is designed and applied to dynamic plant control. The performance of HGAPSO is compared to both GA and PSO in these recurrent networks design problems, demonstrating its superiority.', 'title': 'A hybrid of genetic algorithm and particle swarm optimization for recurrent network design'}
[2025-03-18 09:53:34,505][beir.datasets.data_loader][INFO] - Loading Queries...
[2025-03-18 09:53:34,562][beir.datasets.data_loader][INFO] - Loaded 1000 TEST Queries.
[2025-03-18 09:53:34,562][beir.datasets.data_loader][INFO] - Query Example: A Direct Search Method to solve Economic Dispatch Problem with Valve-Point Effect
[2025-03-18 09:54:50,589][root][INFO] - 

[2025-03-18 09:54:50,590][root][INFO] - NDCG@1: 0.1730
[2025-03-18 09:54:50,590][root][INFO] - NDCG@10: 0.1231
[2025-03-18 09:54:50,590][root][INFO] - NDCG@100: 0.1231
[2025-03-18 09:54:50,590][root][INFO] - NDCG@1000: 0.1231
[2025-03-18 09:54:50,591][root][INFO] - 

[2025-03-18 09:54:50,591][root][INFO] - MAP@1: 0.0352
[2025-03-18 09:54:50,592][root][INFO] - MAP@10: 0.0734
[2025-03-18 09:54:50,592][root][INFO] - MAP@100: 0.0734
[2025-03-18 09:54:50,592][root][INFO] - MAP@1000: 0.0734
[2025-03-18 09:54:50,592][root][INFO] - 

[2025-03-18 09:54:50,593][root][INFO] - Recall@1: 0.0352
[2025-03-18 09:54:50,594][root][INFO] - Recall@10: 0.1126
[2025-03-18 09:54:50,595][root][INFO] - Recall@100: 0.1126
[2025-03-18 09:54:50,595][root][INFO] - Recall@1000: 0.1126
[2025-03-18 09:54:50,595][root][INFO] - 

[2025-03-18 09:54:50,595][root][INFO] - P@1: 0.1730
[2025-03-18 09:54:50,596][root][INFO] - P@10: 0.0554
[2025-03-18 09:54:50,596][root][INFO] - P@100: 0.0055
[2025-03-18 09:54:50,597][root][INFO] - P@1000: 0.0006
[2025-03-18 09:54:50,598][root][INFO] - 

[2025-03-18 09:54:50,608][root][INFO] - R_cap@1: 0.1730
[2025-03-18 09:54:50,608][root][INFO] - R_cap@10: 0.1126
[2025-03-18 09:54:50,608][root][INFO] - R_cap@100: 0.1126
[2025-03-18 09:54:50,610][root][INFO] - R_cap@1000: 0.1126
